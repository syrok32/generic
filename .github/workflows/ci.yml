name: Django CI

on: [ push, pull_request ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: install Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: '3.12'
      - name: install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run flake8
        run: flake8 .
  test:
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 202054
          POSTGRES_DB: project4
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      ENGINE: django.db.backends.postgresql
      NAME: project4
      USER: postgres
      PASSWORD: 202054
      HOST: localhost
      PORT: 5432
      DEBUG: true
      CELERY_BROKER_URL: redis://localhost:6379/0


    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: '3.12'

      - name: install deepedansis
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: login docker
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полная история для возможных git-операций

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Verify files exist
        run: |
          ls -la docker-compose.yml  # Проверяем наличие файла
          echo ".env content sample:" && head -n 3 .env || echo "No .env yet"

      - name: Prepare environment
        run: |
          # Создаем/перезаписываем .env из секретов
          echo "${{ secrets.ENV_FILE }}" > .env
          chmod 600 .env  # Защищаем файл с переменными

      - name: Deploy files to server
        run: |
          # Копируем ВСЕ необходимые файлы
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            ./docker-compose.yml \
            ./.env \
            ./nginx/ \          # Если есть конфиги nginx
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/myapp/

      - name: Execute deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ~/myapp

            # Авторизация в Docker Hub (если нужны приватные образы)
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | \
              docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Полный цикл обновления
            docker compose down --remove-orphans
            docker compose pull
            docker compose up -d --build --wait

            # Очистка (опционально)
            docker image prune -af
          EOF
