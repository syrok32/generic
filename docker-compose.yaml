version: '3.8'

services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/Restapimodel
      - static_volume:/Restapimodel/static
    ports:
      - '8000:8000'
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend

  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${NAME}
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery-beat:
    build: .
    command: celery -A Restapimodel beat --loglevel=info
    volumes:
      - .:/code
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend

  celery:
    build: .
    command: celery -A Restapimodel worker --loglevel=info --uid=1000
    volumes:
      - .:/code
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend

volumes:
  postgres_data:
  static_volume:

networks:
  backend:
    driver: bridge