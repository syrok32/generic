services:
  web:
    image: your_dockerhub_username/myapp:latest
    command: sh -c "python manage.py collectstatic --noinput && gunicorn Restapimodel.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/code/staticfiles
    depends_on:
      - web
    networks:
      - backend
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${NAME}
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - backend
    volumes:
      - ./data/cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery:
    build: .
    command: celery -A Restapimodel worker --loglevel=info
    user: "1000:1000"
    healthcheck:
      test: [ "CMD", "celery", "-A", "Restapimodel", "inspect", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - .:/code
    links:
      - redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend



  celery-beat:
    build: .
    command: celery -A Restapimodel beat --loglevel=info
    volumes:
      - .:/code
    depends_on:
      celery:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    env_file:
      - .env
    networks:
      - backend


volumes:
  postgres_data:
  static_volume:
  redis_data:

networks:
  backend:
    driver: bridge